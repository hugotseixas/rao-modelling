---
title: "Exploring: Linking land-use and land-cover transitions to their ecological impact in the Amazon"
author: 
  - name: Hugo Tameirão Seixas
    email: seixas.hugo@protonmail.com
    url: hugotseixas.com
toc: true
toc-title: Contents
format: 
  html:
    theme: lux
    df-print: paged
    code-fold: true
    self-contained: true
page-layout: article
abstract: "Lets explore data on the impacts of land use transitions over ecosystem services! I will explore aplication of predctive models over this data."
highlight-style: arrow
license: CC BY 4.0
---

# Introduction

This exploration exercise will use data from the paper "Linking land-use and land-cover transitions to their ecological impact in the Amazon".

I have two questions:

 - Can I predict the species richness of an area with information about: land use and land cover, carbon stocks and soil properties?
 
 - Can I classify the land use and land cover with information about: species richness, carbon stocks and soil properties?

Here are the packages used in this exercise:

```{r}
#| label: load packages
#| warning: false

library(sf)
library(geobr)
library(arrow)
library(curl)
library(glue)
library(fs)
library(ggiraph)
library(patchwork)
library(tidyverse)
library(tidymodels)

```

```{r}

my_palette <-
  c(
    "#004d25", "#11823b", "#99AA38", "#721121", 
    "#A5402D", "#F15156", "#FFC07F", "#804D54"
  )

my_labels <-
  c(
    "Undisturbed Forest", "Logged Forest", 
    "Logged Burned Forest", "Old Secondary Forest", 
    "Young Secondary Forest", "Reforestation", 
    "Pasture", "Mechanized Agriculture"
  )

```


# Download and organize data

Lets download the data! I am going to download the data from Zenodo, than open it in the local machine and keep only the files of interest.

## Download

```{r}
#| label: download data

file_name <- "data/LULC_transitions-v1.1.zip"

curl_download(
  url = glue(
    "https://zenodo.org/record/6518744/files/",
    "cassioalencarnunes/LULC_transitions-v1.1.zip?download=1"
  ),
  destfile = file_name
)

unzip(
  zipfile = file_name,
  exdir = "data/"
)

data_files <- 
  dir_ls(
    path = "data/cassioalencarnunes-LULC_transitions-c501bd5/Data/"
  )

file_move(path = data_files, new_path = "data/")

dir_delete(path = "data/cassioalencarnunes-LULC_transitions-c501bd5/")

file_delete(path = "data/LULC_transitions-v1.1.zip")

dir_info("data/") %>%
  select(path, size)

```

## Organize

::: {.panel-tabset}

### Transects

I will start opening the table files and organize them into a single table. I will start with the transect classification data, which holds data of two regions, STM ( municipalities of Santarém, Belterra, and Mojuí-dos-Campos) and PGM (municipality of Parangominas):

```{r}
#| label: organize transect data

tr_class <- 
  read_delim(
    file = "data/Transect_classification.csv",
    col_select = c(2:6), # Remove unnamed id column
    name_repair = ~ 
      str_replace(
        string = tolower(.), # I prefer everything in lowercase
        pattern = "-", # These traces are problematic 
        replacement = "_"
      ), 
    col_types = "_ccccc"
  )

head(tr_class)

```

### Biodiversity

There is a lot of tables containing biodiversity variables to be analysed. Since they are stored in many different tables, I will map the operation using the **purrr** package, in which we will apply a function to every biodiversity table. The function will open the tables, pivot them to a longer format (there are many columns indicating a certain specie), and than create a new column indicating what is the group that the species are part of. There was a weird column in the dung beetle table, named "aaaaaa", I removed it just as the author of the paper.

```{r}

# Create list of files that contains tables with biodiversity data
tables_list <- 
  dir_ls(path = "data/") %>%
  str_subset(
    pattern = regex(
      "ants|trees|bees|birds|dung_beetles|liana|saplings", 
      ignore_case = TRUE
    )
  )

# Merge tables in a single table
biodiversity <- 
  map_df(
    .x = tables_list,
    .f = function(t) {
    
      table <- 
        read_delim(
          file = t,
          name_repair = ~ tolower(.),
          col_select = !matches("aaaaa"), # Remove weird column
          col_types = "cccc"
        )

      table %>%
        pivot_longer(
          cols = starts_with("sp"),
          names_to = "specie",
          values_to = "number"
        ) %>%
        mutate(
          bio_specie = str_remove_all(
            string = t, 
            pattern = "data/|_|STM|PGM|.txt"
          )
        )
    
    }
  )

biodiversity <- biodiversity %>%
  mutate(number = if_else(number > 0, 1, 0)) %>%
  group_by(region, transect_code, bio_specie) %>%
  summarise(bio_richness = sum(number, na.rm = FALSE), .groups = "drop")

head(biodiversity)

```

### Environment

I will also use the table with some environmental variables.

```{r}

envr <-
  read_delim(
    file = "data/environment_all.txt",
    col_select = c(1:7, 37:38, 49:50),
    name_repair = ~ 
      str_replace(
        string = tolower(.), # I prefer everything in lowercase
        pattern = "-", # These traces are problematic 
        replacement = "_"
      ), 
    col_types = "cccc"
  ) %>%
  mutate(
    land_useclass = 
      str_replace( # Fix land use variable 
        string = land_useclass, 
        pattern = "Mechanisd_agriculture",
        replacement = "Mechanized_agriculture"
      )
  ) %>%
  rename(
    transect_code = transectcode,
    env_silt = silt_all, env_clay = clay_all,
    env_elev = elev_mean, env_slope = slope_mean,
  ) %>%
  mutate(
    across(c(env_silt:env_slope), ~ round(.x, digits = 2))
  )

head(envr)

```

### Soil

```{r}

soil <- 
  map_df(
    .x = dir_ls(path = "data/", regexp = "Soil"),
    .f = function(t) {
      
      table <- 
        read_delim(
          file = t,
          col_select = c(2:9, 11, 12), # I'm leaving sodium out
          name_repair = ~ tolower(.),
          col_types = "_cccc"
        )
      
    }
  ) %>%
  rename(
    soil_ph = ph, soil_n = nperc, soil_p = p, 
    soil_k = k, soil_ca = camg, soil_al = al
  ) %>%
  mutate(
    soil_n = soil_n * 100, # to percentage
    across(c(soil_ph, soil_p:soil_al), ~ round(.x, digits = 2))
  ) 

head(soil)

```

### Carbon

```{r}

carbon <- 
  map_df(
    .x = dir_ls(path = "data/", regexp = "Carbon"),
    .f = function(t) {
      
      table <- 
        read_delim(
          file = t,
          name_repair = ~ tolower(.), # I prefer everything in lowercase
          col_types = "c"
        ) %>%
        mutate(region = str_extract(t, "PGM|STM"))
      
    }
  ) %>%
  rename(
    carbon_aboveground = aboveground_pool, carbon_litter = litter_pool,
    caebon_deadwood = dead_pool, carbon_soil = soil_pool_new
  ) %>%
  mutate(
    across(c(carbon_aboveground:carbon_soil), ~ round(.x, digits = 2))
  )

head(carbon)

```

:::

## Merge

```{r}

full_data <- tr_class %>%
  inner_join(
    y = biodiversity, 
    by = c("region", "transect_code")
  ) %>%
  inner_join(
    y = soil, 
    by = c("region", "catchment", "transect", "transect_code")
  ) %>%
  inner_join(
    y = carbon, 
    by = c("region", "transect_code")
  ) %>%
  inner_join(
    y = envr, 
    by = c("region", "catchment", "transect", "transect_code")
  ) %>%
  mutate(
    land_useclass = str_replace_all( # Make LULC names more beautiful
      string = land_useclass, 
      pattern = "-|_",
      replacement = " "
    ),
    region = fct(region, levels = c("STM", "PGM")),
    lu_uf = fct(
      lu_uf, 
      levels = c(
        "UF", "LF", "BF", "LBF", "SFold", "SFyoung", "REF", "PA", "MA", 
        "AP", "FRU", "SHA"
      )
    )
  )

write_parquet(
  x = full_data,
  sink = "data/lulc_eco.parquet",
  version = "latest"
)

file_delete(
  path = dir_ls(
    "data/",
    glob = "*.parquet",
    invert = TRUE
  )
)

rm(list = setdiff(ls(), c("my_palette", "my_labels")))

```

# Descriptive Analysis

Now we have a single table to start exploring! Lets begin with some descriptive analysis. We will check what are the LULC of the transects of the study.

::: {.panel-tabset}

## Transects

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c("region", "transect_code", "lu_uf")
  ) %>%
  distinct(region, transect_code, lu_uf, .keep_all = TRUE) %>%
  group_by(lu_uf) %>%
  count(lu_uf) %>%
  ungroup()

lu_subset <- data %>%
  arrange(desc(n)) %>%
  slice_max(n, n = 8) %>%
  pull(lu_uf)

data %>%
  arrange(desc(n))

```


```{r}
#| label: transect-location
#| warning: false

muni <- 
  read_municipality(
    code_muni = "PA", 
    showProgress = FALSE
  ) %>% 
  filter(code_muni %in% c(1506807, 1501451, 1505502))

data <- 
  map2_df(
    .x = c("STM", "PGM"),
    .y = c("21", "23"),
    .f = function(r, z) {
      
      data <-
        read_parquet(
          file = "data/lulc_eco.parquet",
          col_select = c(
            "region", "transect_code", "lu_uf", "utm_x", "utm_y"
          )
        ) %>%
        filter(
          region == r, 
          lu_uf %in% lu_subset
        ) %>%
        distinct(region, transect_code, lu_uf, .keep_all = TRUE) %>%
        st_as_sf(
          coords = c("utm_x", "utm_y"), 
          crs = glue(
            "+proj=utm +zone={z} +south +datum=WGS84 +units=m +no_defs"
          )
        ) %>%
        st_transform(st_crs(muni))
      
    }
  )

maps <- 
  map2(
    .x = c("STM", "PGM"),
    .y = list(c(1506807, 1501451), c(1505502)),
    .f = function(r, m) {
      
      ggplot() +
        geom_sf(data = muni %>% filter(code_muni %in% m)) +
        geom_sf_interactive(
          data = data %>% filter(region == r),
          aes(
            color = lu_uf,
            tooltip = lu_uf,
            data_id = lu_uf,
            `data-id` = lu_uf
          ),
          size = 1,
          extra_interactive_params = "data-id"
        ) +
        scale_color_manual_interactive(
          values = my_palette,
          extra_interactive_params = "data-id",
          `data-id` = data %>% 
            arrange(data, lu_uf) %>% 
            distinct(lu_uf),
          data_id = function(breaks) { as.character(breaks) }
        ) +
        annotate(
          "text", 
          -Inf, Inf, 
          label = glue("bold({r})"), 
          parse = TRUE,
          hjust = -0.5, vjust = 3
        ) +
        guides(
          color = guide_legend_interactive(override.aes = list(size = 4))
        ) +
        theme_void(base_family = "sans") +
        theme(
          legend.title = element_blank(),
          panel.grid.major = element_blank(),
          axis.title = element_blank(),
          legend.position = "bottom"
        )
      
    }
  )

bars <- 
  map(
    .x = c("STM", "PGM"),
    .f = function(r) {
      
      ggplot() +
        geom_col_interactive(
          data = data %>% 
            filter(region == r) %>%
            group_by(lu_uf) %>%
            count(),
          aes(
            data_id = lu_uf,
            `data-id` = lu_uf,
            x = n,
            y = lu_uf,
            tooltip = glue("Observations: {n}"),
            fill = lu_uf
          ),
          show.legend = FALSE
        ) +
        scale_fill_manual_interactive(
          values = my_palette,
          extra_interactive_params = "data-id",
          `data-id` = data %>% 
            arrange(data, lu_uf) %>% 
            distinct(lu_uf),
          data_id = function(breaks) { as.character(breaks) }
        ) +
        labs(y = "", x = "") +
        theme_void(base_family = "sans") +
        theme(
          text = element_text(size = 15, family = "Open Sans"),
          axis.text.y = element_blank(),
          legend.position = ""
        )
      
    }
  )
  
rm(muni)

girafe(
  code = 
    print(
      maps[[2]] + bars[[2]] + 
        plot_spacer() + plot_spacer() + 
        maps[[1]] + bars[[1]] + 
        plot_layout(
          ncol = 2, nrow = 3,
          guides = "collect",
          heights = c(2, 0.2, 2),
          width = c(3, 1)
        ) & 
        theme(legend.position = "bottom")
      ), 
  options = list(
    opts_tooltip(
      css = "background-color:white;color:black;padding:5px;border-radius:2px;"
    ),
    opts_hover_inv(css = "opacity:0.5;"),
    opts_hover(girafe_css("stroke:black;fill:black;")),
    opts_hover_key(girafe_css("stroke:black;fill:black")),
    opts_toolbar(saveaspng = FALSE),
    fonts = list(sans = "Open Sans")
  )
)

```

## Biodiveristy

Now we will check the species numbers

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "transect_code", "lu_uf",
      "bio_richness", "bio_specie"
    )
  ) %>%
  filter(lu_uf %in% lu_subset) %>%
  group_by(region, lu_uf, bio_specie) %>%
  summarise(bio_richness = sum(bio_richness), .groups = "keep") %>%
  mutate(
    id = cur_group_id(),
    richness_label = glue(
      "{lu_uf} \n",
      "{bio_specie} \n",
      "Number of species: {bio_richness}"
    )
  )

plot <- ggplot(data) +
  facet_wrap(vars(region)) +
  geom_tile_interactive(
    aes(
      data_id = id,
      x = bio_specie,
      y = lu_uf,
      fill = sqrt(bio_richness),
      tooltip = richness_label
    )
  ) +
  scale_fill_gradient(
    low = "#2c2929",
    high = "#C0C0C0"
  ) +
  labs(y = "", x = "") +
  theme_bw(base_family = "sans") +
  theme(
    text = element_text(size = 15, family = "Open Sans"),
    axis.text.y = element_text(
      hjust = 1, vjust = 0.5, margin = margin(r = 20), angle = 45
    ),
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    legend.position = "",
    panel.grid = element_blank()
  )

girafe(
  ggobj = plot, 
  options = list(
    opts_tooltip(
      css = "background-color:white;color:black;padding:5px;border-radius:2px;"
    ),
    opts_hover_inv(css = "opacity:0.5;"),
    opts_hover(
      girafe_css(
        css = "stroke:black;cursor:pointer;r:5px;",
      )
    ),
    opts_toolbar(saveaspng = FALSE),
    fonts = list(sans = "Open Sans")
  )
)

```

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "transect_code", "land_useclass",
      "bio_richness", "bio_specie"
    )
  ) %>%
  group_by(region, land_useclass, transect_code) %>%
  summarise(
    bio_richness = sum(bio_richness, na.rm = TRUE), .groups = "drop_last"
  ) %>%
  mutate(
    id = cur_group_id(),
    label = glue(
      "Total Observations: {n()}",
      "\n",
      "Mean: {round(mean(bio_richness))}",
      "\n",
      "Median: {round(median(bio_richness))}",
      "\n",
      "Variance: {round(var(bio_richness))}"
    )
  ) %>%
  ungroup() %>%
  add_count(land_useclass) %>%
  filter(
    bio_richness > 0,
    dense_rank(desc(n)) <= 4 # Filter the four LULC classes with most obs
  ) %>%
  select(-n)

plot <- 
  ggplot(data) +
    facet_grid_interactive(
      interactive_on = "both",
      region ~ land_useclass,
      labeller = labeller(
        land_useclass = labeller_interactive(
          aes(
            tooltip = glue("{land_useclass}"),
            label = c("MA", "PA", "PF", "SF")
          )
        )
      )
    ) +
    geom_histogram_interactive(
      aes(
        x = bio_richness,
        tooltip = label,
        data_id = id
      ),
      binwidth = 15
    ) +
  labs(x = "Number of Species", y = "Count") +
    theme_bw(base_family = "sans") +
    theme(
      text = element_text(size = 15, family = "Open Sans"),
      axis.text.y = element_text(
        hjust = 1, vjust = 0.5, margin = margin(r = 5)
      ),
      axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
      strip.text.x = element_text_interactive()
    )

girafe(
  ggobj = plot, 
  options = list(
    opts_tooltip(
      css = "background-color:white;color:black;padding:5px;border-radius:2px;"
    ),
    opts_hover_inv(css = "opacity:0.5;"),
    opts_hover(
      girafe_css(
        css = "stroke:black;cursor:pointer;r:5px;",
      )
    ),
    opts_toolbar(saveaspng = FALSE),
    fonts = list(sans = "Open Sans")
  )
)

```

## Soil

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "transect_code", "land_useclass", "soil_ph":"soil_al"
    )
  ) %>%
  distinct(transect_code, .keep_all = TRUE) %>%
  pivot_longer(
    cols = soil_ph:soil_al,
    names_to = "soil_props",
    values_to = "value"
  ) %>%
  drop_na() %>%
  add_count(land_useclass) %>%
  filter(
    dense_rank(desc(n)) <= 4 # Filter the four LULC classes with most obs
  ) %>%
  select(-n)

plot <- 
  ggplot(data) +
  facet_wrap(
    vars(soil_props), 
    scales = "free_x",
    labeller = labeller(
      soil_props = c(
        soil_al = "Al", soil_ca = "Ca", 
        soil_k = "K", soil_n = "N", 
        soil_p = "P", soil_ph = "pH"
      )
    )
  ) +
  geom_violin(
    aes(
      y = land_useclass, 
      x = value
    )
  ) + 
  scale_x_continuous(breaks = pretty_breaks(4)) +
  theme_bw(base_family = "sans") +
  theme(
    axis.title = element_blank(),
    text = element_text(size = 15, family = "Open Sans"),
    axis.text.y = element_text(hjust = 0, margin = margin(r = 30))
  )

girafe(
  ggobj = plot, 
  options = list(
    opts_tooltip(
      css = "background-color:white;color:black;padding:5px;border-radius:2px;"
    ),
    opts_hover_inv(css = "opacity:0.5;"),
    opts_hover(
      girafe_css(
        css = "stroke:black;cursor:pointer;r:5px;",
      )
    ),
    opts_toolbar(saveaspng = FALSE),
    fonts = list(sans = "Open Sans")
  )
)

```

## Carbon

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "transect_code", "land_useclass", 
      "carbon_aboveground":"carbon_soil"
    )
  ) %>%
  distinct(transect_code, .keep_all = TRUE) %>%
  drop_na() %>%
  pivot_longer(
    cols = carbon_aboveground:carbon_soil,
    names_to = "carbon",
    values_to = "value"
  ) %>%
  add_count(land_useclass) %>%
  filter(
    dense_rank(desc(n)) <= 4 # Filter the four LULC classes with most obs
  ) %>%
  select(-n) %>%
  group_by(region, land_useclass, transect_code) %>%
  summarise(value = sum(value), .groups = "drop")

ggplot(data) +
  geom_violin(
    aes(
      y = land_useclass, 
      x = value
    )
  ) + 
  scale_x_continuous(breaks = pretty_breaks(4)) +
  theme_bw(base_family = "sans") +
  theme(
    axis.title = element_blank(),
    text = element_text(size = 15, family = "Open Sans"),
    axis.text.y = element_text(hjust = 0, margin = margin(r = 30))
  )

```

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "transect_code", "land_useclass", 
      "carbon_litter", "carbon_soil"
    )
  ) %>%
  distinct(transect_code, .keep_all = TRUE) %>%
  drop_na() %>%
  pivot_longer(
    cols = carbon_litter:carbon_soil,
    names_to = "carbon",
    values_to = "value"
  ) %>%
  add_count(land_useclass) %>%
  filter(
    dense_rank(desc(n)) <= 4 # Filter the four LULC classes with most obs
  ) %>%
  select(-n)

ggplot(data) +
  facet_wrap(
    vars(carbon), 
    scales = "free_x",
    labeller = labeller(
      carbon = c(carbon_litter = "Litter", carbon_soil = "Soil")
    )
  ) +
  geom_violin(
    aes(
      y = land_useclass, 
      x = value
    )
  ) + 
  scale_x_continuous(breaks = pretty_breaks(4)) +
  theme_bw(base_family = "sans") +
  theme(
    axis.title = element_blank(),
    text = element_text(size = 15, family = "Open Sans"),
    axis.text.y = element_text(hjust = 0, margin = margin(r = 30))
  )

```

## Filter data

```{r}

data <- 
  read_parquet(
    file = "data/lulc_eco.parquet",
    col_select = c(
      "region", "catchment", "transect", "land_useclass", "lu_uf",
      "bio_richness", "bio_specie",
      "soil_ph":"soil_al",
      "carbon_aboveground":"carbon_soil"
    )
  ) %>%
  filter(
    lu_uf %in% lu_subset,
    bio_specie != "Bees"
  ) %>%
  drop_na()

write_parquet(
  x = data,
  sink = "data/filtered_lulc_eco.parquet",
  version = "latest"
)

```


:::

# Modelling

```{r}

data <- 
  read_parquet(
    file = "data/filtered_lulc_eco.parquet",
    col_select = c(
      "region", "catchment", "transect", "land_useclass", "lu_uf",
      "bio_richness", "bio_specie",
      "soil_ph":"soil_al",
      "carbon_aboveground":"carbon_soil"
    )
  ) %>%
  drop_na()

set.seed(821715)

data_split <- initial_split(data, prop = 2/4)

train_data <- training(data_split)
test_data  <- testing(data_split)

```

```{r}

biod_rec <- 
  recipe(bio_richness ~ ., data = train_data) %>%
  update_role(
    region, catchment, transect, land_useclass,
    new_role = "ID"
  ) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_predictors())

biod_mod <-
  linear_reg() %>%
  set_engine("lm")

biod_wflow <- 
  workflow() %>% 
  add_model(biod_mod) %>% 
  add_recipe(biod_rec)

biod_fit <- 
  biod_wflow %>%
  fit(data = train_data)

biod_aug <- augment(biod_fit, test_data)

biod_aug %>% 
  metrics(truth = bio_richness, estimate = .pred)

biod_aug %>%
  ggplot() +
  geom_point(
    aes(
      x = bio_richness,
      y = .pred,
      color = land_useclass
    )
  ) +
  lims(x = c(-30, 100), y = c(-30, 100)) +
  geom_abline() +
  coord_equal() +
  theme_bw()

```

```{r}

biod_rec <- 
  recipe(bio_richness ~ ., data = train_data) %>%
  update_role(
    region, catchment, transect, land_useclass,
    new_role = "ID"
  ) %>%
  step_zv(all_predictors())

biod_mod <-
  rand_forest() %>%
  set_engine("ranger") %>%
  set_mode("regression")

biod_wflow <- 
  workflow() %>% 
  add_model(biod_mod) %>% 
  add_recipe(biod_rec)

biod_fit <- 
  biod_wflow %>%
  fit(data = train_data)

biod_aug <- augment(biod_fit, test_data)

mod_met <- biod_aug %>% 
  metrics(truth = bio_richness, estimate = .pred) %>%
  mutate(.estimate = round(.estimate, digits = 2))

biod_aug %>%
  ggplot() +
  geom_point(
    aes(
      x = bio_richness,
      y = .pred,
      color = lu_uf
    )
  ) +
  scale_color_manual(values = my_palette) +
  annotate(
    geom = "text",
    x = 0, y = c(100, 96, 92),
    hjust = 0,
    label = c(
      glue("bold({toupper(mod_met$.metric[1])})- {mod_met$.estimate[1]}"),
      glue("bold({toupper(mod_met$.metric[3])})- {mod_met$.estimate[3]}"),
      glue("bold({toupper(mod_met$.metric[2])})- {mod_met$.estimate[2]}")
    ),
    parse = TRUE,
    size = 5
  ) +
  lims(x = c(0, 100), y = c(0, 100)) +
  labs(x = "Observations", y = "Estimations") +
  geom_abline() +
  coord_equal() +
  theme_bw() +
  theme(
    legend.title = element_blank()
  )

```

